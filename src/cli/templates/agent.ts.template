import { createMachine, assign } from 'xstate';
import type { BaseAgentContext, BaseAgentEvent } from '@directive/sdk/types';

/**
 * {{description}}
 * 
 * Type: {{agentType}}
 * Author: {{author}}
 * Architecture: Directive v2.0 (simplified)
 */

export interface {{PascalCaseName}}Context extends BaseAgentContext {
  // Add your specific data here
  // Base fields (currentState, requestData, result, error, sessionId, sessionMetadata) 
  // are already included via BaseAgentContext
}

export type {{PascalCaseName}}Event = BaseAgentEvent | 
  // Add your specific events here
  { type: 'CUSTOM_EVENT'; payload: any };

/**
 * XState machine for agent {{agentName}}
 * 
 * Available states:
 * - idle: Initial state, waiting
 * - processing: Processing in progress
 * - success: Processing successful
 * - error: Error encountered
 */
export const {{camelCaseName}}Machine = createMachine({
  id: '{{agentName}}',
  initial: 'idle',
  
  // Initial context based on BaseAgentContext
  context: ({
    currentState: 'idle',
    requestData: null,
    result: null,
    error: null,
    sessionId: '',
    sessionMetadata: {}
  }) as {{PascalCaseName}}Context,

  states: {
    idle: {
      on: {
        PROCESS: {
          target: 'processing',
          actions: assign({
            currentState: 'processing',
            requestData: ({ event }) => event.type === 'PROCESS' ? (event as any).data : null
          })
        }
      }
    },

    processing: {
      invoke: {
        // Simulate async processing
        src: 'process{{PascalCaseName}}',
        onDone: {
          target: 'success',
          actions: assign({
            currentState: 'success',
            result: ({ event }) => event.output
          })
        },
        onError: {
          target: 'error',
          actions: assign({
            currentState: 'error',
            error: ({ event }) => String(event.error)
          })
        }
      }
    },

    success: {
      type: 'final',
      output: ({ context }) => ({
        success: true,
        result: context.result,
        sessionId: context.sessionId
      })
    },

    error: {
      type: 'final',
      output: ({ context }) => ({
        success: false,
        error: context.error,
        sessionId: context.sessionId
      })
    }
  }
}); 